@inject IMembershipService membershipService
<div class="row">
	<div class="col">
		<div class="card rounded-0 m-2 " style="max-width:350px;">
			<div class="card-body">
				<h1 class="card-title">@Film.Title</h1>
				<p class="card-text">@Film.Description</p>
				<a href="#" class="btn btn-danger rounded-0 mb-1"
				<i class="oi oi-media-play"></i><span class="vertical-align">Play Film!</span>
				</a>
			</div>
		</div>
		<div class="card rounded-0 m-2 " style="max-width:350px;">
			<div class="card-body">
				<p class="card-text">Director: <span class="fw-bold">@Film.DirectorName</span></p>
				<p class="card-text">
					Released: <span class="fw-bold">
						@if (Film.Released != null)
						{
							@Film.Released.Value.ToString("d")
						}
					</span>
				</p>
				<p class="card-text">
					Genre:

					@foreach (var filmgenre in FilmGenres)
					{
						@if (Film.Id.Equals(filmgenre.FilmId))
						{
							@foreach (var genre in Genres)
							{
								@if (genre.Id.Equals(filmgenre.GenreId))
								{
									<span class="fw-bold">@filmgenre.GenreTitle</span>

									<span> || </span>
								}
							}
						}
					}
				</p>
			</div>
		</div>
		<div class="card rounded-0 m-2 border border-0 " style="max-width:800px;">
			<div class="card-body">
				<div>
						<h3 class="fw-bold">Similar Films:</h3>
					<div class="d-flex flex-wrap justify-content-start row row-cols-3 ">						
							@foreach (var similarfilm in SimilarFilms)
							{
								@if (Film.Id.Equals(similarfilm.ParentFilmId))
								{
									@foreach (var video in FilmList)
									{
										@if (similarfilm.SimilarFilmId.Equals(video.Id))
										{
											<FilmCard Film="video" />
										}
									}
								}
							}
						</div>
					
				</div>
			</div>
		</div>
	</div>
	<div class="col">
		<div class="card" style="max-width: 600px">
			<img src="@Film.Thumbnail" class="card-img-top" alt="FilmPoster">

		</div>
	</div>
</div>

@code {
	[Parameter] public FilmDTO Film { get; set; }
	public List<SimilarFilmsDTO> SimilarFilms { get; set; } = new();
	public List<FilmDTO> FilmList { get; set; } = new();
	public List<FilmGenreDTO> FilmGenres { get; set; } = new();
	public List<GenreDTO> Genres { get; set; } = new();


	protected override async Task OnInitializedAsync()
	{
		SimilarFilms = await membershipService.GetSimilarFilmsAsync();
		FilmList = await membershipService.GetFilmsAsync();
		FilmGenres = await membershipService.GetFilmGenresAsync();
		Genres = await membershipService.GetGenresAsync();
	}
}