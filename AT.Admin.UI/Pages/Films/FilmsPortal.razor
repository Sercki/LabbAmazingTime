@inject IAdminService AdminService

@if (!string.IsNullOrEmpty(Alert))
{
    <div class="d-flex">
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>@Alert</strong>
            <button type="button" @onclick="CloseAlert" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

@if (Navigation == PageType.Create)
{
    <ChangeFilm Page="@Navigation" OnChange="OnChange"></ChangeFilm>
}
@if (Navigation == PageType.Delete || Navigation == PageType.Edit)
{
    <ChangeFilm Page="@Navigation" OnChange="OnChange" Model="Film"></ChangeFilm>
}

<div class="d-flex me-1">
    <a href="/" class="btn btn-outline-secondary rounded-0 me-1">Home</a>
    <button type="button" class="btn btn-outline-primary rounded-0 me-1" @onclick="()=>ChangePageType(PageType.Index)">Index</button>
    <button type="button" class="btn btn-outline-success rounded-0" @onclick="()=>ChangePageType(PageType.Create)">Create</button>
</div>

<FilmsIndex OnClick="OnClick" Model="Model"></FilmsIndex>

@code {
	List<FilmDTO> Model = new();
	string Alert { get; set; } = "";
	string Navigation { get; set; } = PageType.Index;
	public FilmDTO Film { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		Alert = "";
		Model = await AdminService.GetAsync<FilmDTO>("films?freeOnly=false");
	}

	void ChangePageType(string pageType) => Navigation = pageType;

	void CloseAlert() => Alert = "";

	async Task OnClick(ClickModel model)
	{
		if (model.PageType.Equals(PageType.Edit) || model.PageType.Equals(PageType.Delete))
			Film = await AdminService.SingleAsync<FilmDTO>($"films/{model.Id}") ?? new();

		ChangePageType(model.PageType);
	}

	async Task OnChange(string alert)
    {
        try
        {
            Alert = alert;
            Model = await AdminService.GetAsync<FilmDTO>("films");
            ChangePageType(PageType.Index);
        }
        catch
        {
            Alert = "Couldn't create/edit/delete the film.";
        }
    }
	//+++++++++++++++++metoder för att testa funktionalitet av AdminService+++++++++++++++++++++++++++++++++
	//protected override async Task OnInitializedAsync()
	//{		
		//get metod
		//Model = await AdminService.GetAsync<FilmDTO>("films?freeOnly=false");
		//single get metod
		//var test = await AdminService.SingleAsync<FilmDTO>($"films/1");
		//create metod
		//await AdminService.CreateAsync<FilmCreateDTO>($"films", new FilmCreateDTO
		//    {
		//        Title = "cos",
		//        Released = new DateTime(2021,11,11),
		//        Free = false,
		//        Description = "cos",
		//        Thumbnail = "cos",
		//        FilmUrl = "cos",
		//        DirectorId = 1
		//    });
		//Model = await AdminService.GetAsync<FilmDTO>("films?freeOnly=false");
		//edit metod
		//await AdminService.EditAsync<FilmEditDTO>($"films/13", new FilmEditDTO
		//	{
		//		Id = 13,
		//		Title = "updated",
		//		Released = new DateTime(2021, 11, 11),
		//		Free = false,
		//		Description = "updated",
		//		Thumbnail = "updated",
		//		FilmUrl = "updated",
		//		DirectorId = 1
		//	});
		//Model = await AdminService.GetAsync<FilmDTO>("films?freeOnly=false");
		//delete metod
		//await AdminService.DeleteAsync<FilmDTO>($"films/10");
		//Model = await AdminService.GetAsync<FilmDTO>("films?freeOnly=false");		
	//}
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
}
